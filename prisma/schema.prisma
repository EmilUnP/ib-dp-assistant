// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  COORDINATOR
  ADMIN
}

enum CASCategory {
  CREATIVITY
  ACTIVITY
  SERVICE
}

enum AssessmentType {
  INTERNAL
  EXTERNAL
  MOCK
}

enum CASStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  coordinatorProfile CoordinatorProfile?
  notifications  Notification[]
  sentNotifications Notification[] @relation("NotificationSender")

  @@map("users")
}

model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  studentNumber String   @unique
  cohort        String   // e.g., "2024-2026"
  subjects      String[] // Array of subject codes
  casHours      Int      @default(0)
  casGoal       Int      @default(150)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessments    Assessment[]
  casActivities  CASActivity[]
  aiInsights     AIInsight[]

  @@map("student_profiles")
}

model TeacherProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  subjects  String[] // Array of subject codes they teach
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  casReviews  CASActivity[] @relation("CASReviewer")

  @@map("teacher_profiles")
}

model CoordinatorProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coordinator_profiles")
}

model Assessment {
  id          String         @id @default(cuid())
  studentId   String
  subject     String
  type        AssessmentType
  title       String
  score       Float
  maxScore    Float
  date        DateTime
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model CASActivity {
  id          String      @id @default(cuid())
  studentId   String
  title       String
  category    CASCategory
  description String
  hours       Int
  evidence    String[]    // Array of file URLs
  status      CASStatus   @default(PENDING)
  reviewerId  String?
  reviewedAt  DateTime?
  feedback    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  student  StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reviewer TeacherProfile? @relation("CASReviewer", fields: [reviewerId], references: [id])

  @@map("cas_activities")
}

model Assignment {
  id          String   @id @default(cuid())
  teacherId   String
  title       String
  description String
  subject     String
  dueDate     DateTime
  maxScore    Float
  materials   String[] // Array of file URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model AIInsight {
  id          String   @id @default(cuid())
  studentId   String
  type        String   // e.g., "RISK_ASSESSMENT", "RECOMMENDATION", "ALERT"
  title       String
  description String
  priority    String   // e.g., "HIGH", "MEDIUM", "LOW"
  data        Json     // Flexible JSON data for insight-specific information
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  senderId  String?
  title     String
  message   String
  type      String   // e.g., "DEADLINE", "ALERT", "UPDATE"
  isRead    Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  // Relations
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender User? @relation("NotificationSender", fields: [senderId], references: [id])

  @@map("notifications")
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
